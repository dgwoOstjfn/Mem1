<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="Mo20_St53_FeedControlSystemFilm" Id="{6ecba94c-5b44-4549-aca9-2e8621e984db}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Mo20_St53_FeedControlSystemFilm
(*--------------------------------------------------------------------------------------
Preh IMA Automation Amberg GmbH

<DESC>
The vertical cylinder runs out at the end position turn on the vacuum and the dispensing edge runs in.
Now positioned the pneumatik pick and place handling the Folie at the Combo Sensor Assembly
The feed of the carrier strip be broken by a pneumatik cylinder and gripper
The gripper for feed of the carrier strip open and close when the vertical cylinder is at the fetching position, this process is for tolerance compensation from the carrier strip
The winders turn always on they have a torque motor and the force for uproll is steplessly adjustable
In the machine control is adjustable the force and the direction of the rotation from the torque motor
1 winder for unroll the carrier strip
1 winder for uproll the carrier strip
1 winder for uproll the intermediate tape
</DESC>


<CHANGES>
At every change add date, version´s number, abbr. of name and describe change!

Date 		|	Version	|	Author	|	change description		
--------------------------------------------------------------------------------
2017-02-09	|	1.00	|	PAM		|	initial version

</CHANGES>
<VERSION>
1.00
</VERSION>

<DEPENDENCIES>
;
</DEPENDENCIES>



 -- overview of areas for steps --
Steps [000..099]: 	Feed
Steps [100..199]:	Offer
  
----------------------------------------------------------------------------------------*)


(* _____________________ *)
(* -- Standard-Inputs -- *)
VAR_INPUT
	OrderNr: 			INT :=1;		(* Nr. Actorder *)
	MoNr: 				INT:= 1;		(* Module-Number *)
	StNr: 				INT:= 1;		(* Stationsnumber *)
	BedienEinheit: 		ZENTR_DATA;		(* Central *)
	FaultID: 			BYTE := 0;		(* ID for Error Array *)
	DisplayNr: 			INT := 1;		(* Number of Textdisplay *)
	MPart: 				INT := 1;		(* Machinepart *)
	in_InitChainTxt:	STRING(39);		(* String for Step Chain Diagnosis *)
	in_sKebaKurz:		STRING(gcKebaStKurzLen) := '1234567890'; (* optional - can also be assigned in initialisation paragraph *)
	in_sKebaBez:		STRING(gcKebaStBezLen) 	:= '11111111112222222222333333333344444444445555555555'; (* optional - can also be assigned in initialisation paragraph *)
END_VAR



(* _______________________________ *)
(* -- Handshake with RT-Station -- *)
VAR_INPUT PERSISTENT
	in_bStartControlFinalPosition 	:BOOL:=FALSE; 	(* handshake from Transport *)
	in_bPartIsTakeOver				:BOOL:=FALSE;	(* handshake from pick and place *)
	in_bPartIsTakeOver2				:BOOL:=FALSE;	(* handshake from pick and place *)
END_VAR
VAR_OUTPUT PERSISTENT
	out_bFinalPositionIsReady 		:BOOL:=FALSE;	(* handshake with Transport *)
	out_bPartIsReadyToTakeOver		:BOOL:=FALSE;	(* handshake with pick and place *)
END_VAR


(* __________________ *)
(* -- RT-Interface -- *)
VAR_INPUT
	RtStNr					:SINT := 01;
END_VAR
VAR_IN_OUT
	io_RtFault				:DWORD; // bit array (dword) representing error at RtStNr of roundtable
	io_RtWaiting			:DWORD; // bit array (dword) representing waiting at RtStNr of roundtable
	io_RtWarning			:DWORD; // bit array (dword) representing warning at RtStNr of roundtable
END_VAR



(* ________________________ *)
(* -- Standard-Variables -- *)
VAR PERSISTENT
	SWI: 				BOOL := FALSE;	(* Impulse step is changing forward *)
	SWR:				BOOL := FALSE;	(* Impulse step is changing backwards *)
	Schritt: 			INT := 0;		(* Current step *)
	UZ: 				TON;			(* watchtime *)
	Fault: 				BOOL;			(* Stations Error *)
	Waiting:			BOOL;			(* Station Waiting *)
	Warning:			BOOL;			(* Station Warning *)
	Betrieb: 			BOOL;			(* Enable Steps *)
	StatEin: 			BOOL;			(* Station on *)
	AllInPos: 			BOOL;			(* all cylinders in position and not actuated manually *)
	Active:				BOOL;			(* stepchain is marked as active *)
	Transport:			BOOL;			(* manual transport is enabled *)
	InitRun:			BOOL;			(* goto homepos is enabled *)
	CycleRun:			BOOL;			(* mode for single cycle is enabled *)
	ManualRun:			BOOL;			(* move cylinders manually is enabled *)
	BackwardsRun:		BOOL;			(* backwards run is enabled *)
	tonSeitSwi:			TON;			(* time since last change of step *)
	tonSeitAllInPos:	TON;			(* time since AllInPos has become TRUE *)
	i:					INT;			(* index-runner for loops *)
	xx:					FB_StepTracker;	(* auto record steps *)
	StatString:			STRING(10);		(* '+MM=SS' *)
END_VAR



(* ___________________ *)
(* -- Error-Array 1 -- *)
VAR
	Errors1: ARRAY[1..ErrMaxBits] OF ERRDAT := [
	(* Error 01 *)		(Prio := ErrZyl, Nr:= 510, Txt:='/01            '),
	(* Error 02 *)		(Prio := ErrZyl, Nr:= 510, Txt:='/02            '),
	(* Error 03 *)		(Prio := ErrZyl, Nr:= 510, Txt:='/03            '), 
	(* Error 04 *)		(Prio := ErrZyl, Nr:= 510, Txt:='/04            '),
	(* Error 05 *)		(Prio := ErrEndl,Nr:=2405, Txt:='       =320-BG4'),
	(* Error 06 *)		(Prio := ErrZyl, Nr:= 114, Txt:='       =320-BG4'), 
	(* Error 07 *)		(Prio := ErrZyl, Nr:= 510, Txt:='/07            '),
	(* Error 08 *)		(Prio := ErrZyl, Nr:= 510, Txt:='/08            '),
	(* Error 09 *)		(Prio := ErrZyl, Nr:= 510, Txt:='/09            '),
	(* Error 10 *)		(Prio := ErrZyl, Nr:= 510, Txt:='/10            '),
	(* Error 11 *)		(Prio := ErrZyl, Nr:= 510, Txt:='/11            '),
	(* Error 12 *)		(Prio := ErrZyl, Nr:= 510, Txt:='/12            '),
	(* Error 13 *)		(Prio := ErrZyl, Nr:= 510, Txt:='/13            '),
	(* Error 14 *)		(Prio := ErrZyl, Nr:= 510, Txt:='/14            '),
	(* Error 15 *)		(Prio := ErrZyl, Nr:= 510, Txt:='/15            '),
	(* Error 16 *)		(Prio := ErrZyl, Nr:= 510, Txt:='/16            ')];
	f1: ARRAY [1..ErrMaxBits] OF BOOL := [ErrMaxBits(FALSE)];
	Fehler1: ERRORANZ;
END_VAR
VAR CONSTANT
	feFeedingPositionNotOk		:INT := 05;
	feFktFeedingPositionNotOk	:INT := 06;
	
	(*  ... *)
END_VAR
(*
MV,2405,*************** §Folienband§
MV,2405,§Endposition für§ 10s §nicht erreicht§
MV,114,*************** §Funktionskontrolle§
MV,114,§kein Signalwechsel§
*)

(* _____________________ *)
(* -- Local Variables -- *)
VAR PERSISTENT

	(* == Cylinders == *)
	zyl2FilmWripeOffCross		:ZYL2;	(* MM4 *)
	ixFilmWripeOffCrossA		:BOOL:=FALSE;	
	ixFilmWripeOffCrossB		:BOOL:=FALSE;	
	
	ixCheckPositionFeed			:BOOL:=FALSE;
	bFktCheckPositionFeed		:BOOL:=TRUE;

	rtRestartFlag				:R_TRIG;
END_VAR

(* ____________________ *)


(* _____________________ *)
(* -- Function Blocks -- *)
VAR
END_VAR


]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* ____________________ *)
(* -- Initialisation -- *)
IF neustart OR g_bOnlineChange THEN
	StatString 		:= RIGHT(CONCAT( '000',INT_TO_STRING(StNr) ),3); (* three digits station's prefix is being created automatically for station *)
	in_InitChainTxt := CONCAT( StatString, '§System Film§ §Control§' );
	in_sKebaKurz	:= CONCAT( StatString, 'Control'); // 3+7 digits
	in_sKebaBez		:= in_InitChainTxt;
END_IF

KebaInitStation(
	Panelnummer		:= gKebaAktPanel,
	Aktiv			:= TRUE,
	Kurzbezeichnung	:= in_sKebaKurz,
	Bezeichnung		:= in_sKebaBez,
	ManuellAktiv	:= TRUE,
	RueckwaertsAktiv:= FALSE,
	GsAktiv			:= FALSE,
);

(* _______________________________________ *)
(* -- Entry for Step Sequence Diagnosis -- *)
InitChain(
	Step 			:= Schritt,
	InitialState 	:= TRUE,
	Fault 			:= Fault,
	Waiting 		:= Waiting,
	Warning 		:= Warning,
	AllInPos 		:= AllInPos,
	RunOpenDoor 	:= TRUE,
	Txt 			:= in_InitChainTxt,
	BedienEinheit 	:= BedienEinheit,
	Active 			:= Active,
	Transport 		:= Transport,
	InitRun 		:= InitRun,
	CycleRun 		:= CycleRun,
	ManualRun 		:= ManualRun,
	BackwardsRun 	:= BackwardsRun);
InitRun := FALSE;


(* _______________ *)
(* -- Parameter -- *)
StatEin 					:= ActOrd[MPart].ord_stat[OrderNr].sd_ein;

(* ____________ *)
(* -- Inputs -- *)
ixFilmWripeOffCrossA		:= _053_M20_MP1_BG9_A;
ixFilmWripeOffCrossB		:= _053_M20_MP1_BG9_B;
ixCheckPositionFeed 		:= _053_M20_MP1_BG1;

(* _______________________ *)
(* -- Timer / Watchdogs -- *)
UZ( IN:= NOT SWI AND BedienEinheit.grundbed, PT:= T#10S );
tonSeitSwi( IN := NOT SWI AND Bedieneinheit.grundbed, PT := t#30d );
tonSeitAllInPos( IN := AllInPos AND Bedieneinheit.grundbed, PT := T#30D );


(* _______________ *)
(* -- Cylinders -- *)
zyl2FilmWripeOffCross(
	grundbed	:= Bedieneinheit.grundbed,
	a			:= ixFilmWripeOffCrossA,
	b			:= ixFilmWripeOffCrossB,
	enable_man	:= Bedieneinheit.ventile_ok,
	FNr			:= 200,
	FNrMan		:= 600,
	FAnz		:= DisplayNr,
	StNr		:= StatString, 
	ZylNr		:= '9', 
	ID			:= FaultId,
	Bild		:= picSchlitten1,
);


AllInPos :=	zyl2FilmWripeOffCross.pos;
(* __________________ *)
(* -- Treat Errors -- *)
Fehler1( ID:= FaultID, FAnz:= DisplayNr, EF:= Errors1, F:= f1 );

(* Error´s of function blocks *)
Fault	:= 	zyl2FilmWripeOffCross.err;
Warning := FALSE;
Waiting := FALSE;
FOR i := 1 TO ErrMaxBits BY 1 DO
	IF f1[i] THEN
		IF 		Errors1[i].Prio <= ErrZyl 			THEN Fault := TRUE;
		ELSIF	Errors1[i].Prio <= ErrEndl 			THEN Waiting := TRUE; f1[i] := FALSE;
		ELSIF	Errors1[i].Prio <= ErrWechselpos	THEN Warning := TRUE; f1[i] := FALSE; END_IF
	END_IF
END_FOR


// report Error, Waiting and Warning to cell
IF Fault 	THEN io_RtFault 	:= SETBIT32( io_RtFault,   RtStNr ); END_IF
IF Waiting 	THEN io_RtWaiting 	:= SETBIT32( io_RtWaiting, RtStNr ); END_IF
IF Warning	THEN io_RtWarning 	:= SETBIT32( io_RtWarning, RtStNr ); END_IF


(* Create Errrors / Misc. Errors *)

(* check, if belt is moved, one cycle *)
IF ixCheckPositionFeed THEN bFktCheckPositionFeed := TRUE; END_IF 

(* _______________________________ *)
(* -- Ending Position for Parts -- *)

(* __________________________________ *)
(* -- Station - Allowed to Operate -- *)
Betrieb := 	Bedieneinheit.betrieb
		AND NOT Fault
		AND NOT ManualRun
		AND BedienEinheit.schutz_ok;

rtRestartFlag(CLK :=BedienEinheit.schutz_ok);		
		IF rtRestartFlag.Q AND schritt<=5 THEN			
			Schritt := 0;
		END_IF
(* ________________ *)
(* -- Step-Chain -- *)
xx( iStep := Schritt );
SWI := FALSE;
out_bFinalPositionIsReady 	:=FALSE;	(* handshake with Transport *)
out_bPartIsReadyToTakeOver	:=FALSE;	(* handshake with pick and place *)

CASE Schritt OF

(* == Schritte [000..099]: Feed == *)
0:	xx.x := 'in basepos. -> wait for start';
	IF AllInPos
	AND Bedieneinheit.anl_ein
	AND StatEin
	AND in_bStartControlFinalPosition
	THEN
		out_bFinalPositionIsReady := TRUE;
		out_bPartIsReadyToTakeOver := TRUE;
		Schritt := Schritt + 5;
		SWI := TRUE;
	END_IF
	
05:	xx.x := 'wait for transport is ready';
	out_bFinalPositionIsReady := TRUE;
	out_bPartIsReadyToTakeOver := TRUE;
	IF NOT in_bStartControlFinalPosition
	AND in_bPartIsTakeOver
	THEN
		(* -> spare step for operation *)
		out_bFinalPositionIsReady := TRUE;
		out_bPartIsReadyToTakeOver := TRUE;
		Schritt := Schritt + 5;
		SWI := TRUE;
	END_IF
	
10:	xx.x := 'spare step for operation';
	out_bFinalPositionIsReady := TRUE;
	out_bPartIsReadyToTakeOver := TRUE;
	IF AllInPos
	AND Betrieb
	THEN
		(* -> MM4 Film wripe off cross -> ON (wripe off) *)
		out_bFinalPositionIsReady := TRUE;
		out_bPartIsReadyToTakeOver := TRUE; 
		Schritt := Schritt + 5;
		SWI := TRUE;
	END_IF

15:	xx.x := 'MM4 Film wripe off cross -> ON (wripe off)';
	out_bFinalPositionIsReady := TRUE;
	out_bPartIsReadyToTakeOver := TRUE;
	IF AllInPos
	AND Betrieb
	THEN
		(* -> wait for pick and place is ready *)
		out_bFinalPositionIsReady := TRUE;
		out_bPartIsReadyToTakeOver := FALSE; 
		Schritt := Schritt + 5;
		SWI := TRUE;
	END_IF

20:	xx.x := 'wait for pick and place is ready';
	out_bFinalPositionIsReady := TRUE;
	IF  in_bPartIsTakeOver2
	THEN
		(* -> spare step for operation *)
		out_bFinalPositionIsReady := TRUE;
		Schritt := Schritt + 5;
		SWI := TRUE;
	END_IF	
	
25:	xx.x := 'spare step for operation';
	out_bFinalPositionIsReady := TRUE;
	IF AllInPos
	AND Betrieb
	THEN
		(* -> MM4 Film wripe off cross -> OFF (base pos.) *)
		out_bFinalPositionIsReady := TRUE;
		Schritt := Schritt + 5;
		SWI := TRUE;
	END_IF	
	
30:	xx.x := 'MM4 Film wripe off cross -> OFF (base pos.)';
	out_bFinalPositionIsReady := TRUE;
	IF AllInPos
	AND Betrieb
	THEN
		(* -> BG4 function control sensor *)
		IF NOT bFktCheckPositionFeed  THEN
			f1[feFktFeedingPositionNotOk] := TRUE;
		END_IF 
		bFktCheckPositionFeed 	  := FALSE;
		(* -> enable transport *)
		out_bFinalPositionIsReady := FALSE;
		Schritt := Schritt + 5;
		SWI := TRUE;
	END_IF
	
35:	xx.x := 'BG4 function control sensor';
	IF AllInPos
	AND Betrieb
	THEN
		Schritt := 0;
		SWI := TRUE;
	END_IF
END_CASE

(* ____________________ *)
(* -- React to Steps -- *)
IF NOT ManualRun THEN
	zyl2FilmWripeOffCross.on	:=		( (Schritt >=  15) AND (Schritt <  30) );
END_IF


IF ManualRun THEN (* assign cylinderoutputs .y (by "AND Bedieneinheit.ventile_ok") *)
	_053_M20_MP1_WZ9_QM9_MB1	:= 		zyl2FilmWripeOffCross.y		AND Bedieneinheit.ventile_ok;
	_053_M20_MP1_WZ9_QM9_MB2	:=	NOT	zyl2FilmWripeOffCross.y		AND Bedieneinheit.ventile_ok;
ELSE (* assign cylinderoutputs .on (by "AND Bedieneinheit.ventile_ok") *)
	_053_M20_MP1_WZ9_QM9_MB1	:= 		zyl2FilmWripeOffCross.on	AND Bedieneinheit.ventile_ok;
	_053_M20_MP1_WZ9_QM9_MB2	:=	NOT	zyl2FilmWripeOffCross.on	AND Bedieneinheit.ventile_ok;
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="Mo20_St53_FeedControlSystemFilm">
      <LineId Id="159" Count="4" />
      <LineId Id="776" Count="1" />
      <LineId Id="164" Count="0" />
      <LineId Id="4503" Count="0" />
      <LineId Id="4505" Count="7" />
      <LineId Id="4504" Count="0" />
      <LineId Id="760" Count="0" />
      <LineId Id="167" Count="18" />
      <LineId Id="3982" Count="3" />
      <LineId Id="3981" Count="0" />
      <LineId Id="2155" Count="0" />
      <LineId Id="189" Count="1" />
      <LineId Id="4331" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="1626" Count="0" />
      <LineId Id="1596" Count="0" />
      <LineId Id="197" Count="4" />
      <LineId Id="2414" Count="0" />
      <LineId Id="203" Count="2" />
      <LineId Id="1843" Count="7" />
      <LineId Id="1859" Count="1" />
      <LineId Id="1854" Count="0" />
      <LineId Id="1861" Count="0" />
      <LineId Id="1857" Count="0" />
      <LineId Id="1878" Count="0" />
      <LineId Id="217" Count="1" />
      <LineId Id="222" Count="2" />
      <LineId Id="1895" Count="0" />
      <LineId Id="225" Count="1" />
      <LineId Id="2998" Count="0" />
      <LineId Id="228" Count="10" />
      <LineId Id="3460" Count="2" />
      <LineId Id="242" Count="2" />
      <LineId Id="2666" Count="2" />
      <LineId Id="2677" Count="0" />
      <LineId Id="250" Count="1" />
      <LineId Id="268" Count="6" />
      <LineId Id="4685" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="4686" Count="0" />
      <LineId Id="4688" Count="0" />
      <LineId Id="4690" Count="0" />
      <LineId Id="597" Count="1" />
      <LineId Id="280" Count="1" />
      <LineId Id="3000" Count="1" />
      <LineId Id="2999" Count="0" />
      <LineId Id="285" Count="3" />
      <LineId Id="290" Count="0" />
      <LineId Id="3003" Count="0" />
      <LineId Id="3806" Count="0" />
      <LineId Id="3021" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="3054" Count="0" />
      <LineId Id="3053" Count="0" />
      <LineId Id="3023" Count="0" />
      <LineId Id="3015" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="2624" Count="0" />
      <LineId Id="2605" Count="0" />
      <LineId Id="3026" Count="0" />
      <LineId Id="3057" Count="0" />
      <LineId Id="2607" Count="0" />
      <LineId Id="3056" Count="0" />
      <LineId Id="2609" Count="0" />
      <LineId Id="3045" Count="0" />
      <LineId Id="3229" Count="1" />
      <LineId Id="2610" Count="1" />
      <LineId Id="2604" Count="0" />
      <LineId Id="2600" Count="0" />
      <LineId Id="2612" Count="0" />
      <LineId Id="3037" Count="0" />
      <LineId Id="3049" Count="0" />
      <LineId Id="2613" Count="2" />
      <LineId Id="3232" Count="0" />
      <LineId Id="3234" Count="0" />
      <LineId Id="3233" Count="0" />
      <LineId Id="2617" Count="1" />
      <LineId Id="2592" Count="0" />
      <LineId Id="3235" Count="15" />
      <LineId Id="3252" Count="0" />
      <LineId Id="3254" Count="2" />
      <LineId Id="3258" Count="1" />
      <LineId Id="2619" Count="0" />
      <LineId Id="3260" Count="0" />
      <LineId Id="3263" Count="2" />
      <LineId Id="3271" Count="0" />
      <LineId Id="3266" Count="4" />
      <LineId Id="3262" Count="0" />
      <LineId Id="3273" Count="0" />
      <LineId Id="3275" Count="5" />
      <LineId Id="3284" Count="0" />
      <LineId Id="3286" Count="2" />
      <LineId Id="3285" Count="0" />
      <LineId Id="3281" Count="2" />
      <LineId Id="3274" Count="0" />
      <LineId Id="3261" Count="0" />
      <LineId Id="3030" Count="5" />
      <LineId Id="2688" Count="0" />
      <LineId Id="364" Count="0" />
      <LineId Id="367" Count="3" />
      <LineId Id="2423" Count="0" />
      <LineId Id="373" Count="0" />
      <LineId Id="4157" Count="0" />
      <LineId Id="420" Count="1" />
      <LineId Id="2431" Count="1" />
      <LineId Id="423" Count="0" />
      <LineId Id="2439" Count="1" />
      <LineId Id="425" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>